<!DOCTYPE html>
<html>
<head>
  <!-- Définition des métadonnées -->
  <meta charset="utf-8"> <!-- Encodage du texte en UTF-8 -->
  <meta name="viewport" content="width=device-width, initial-scale=1"> <!-- Réglages pour les appareils mobiles -->
  <title>EPUB.js Spreads Example</title>

  <!-- Inclusion des fichiers nécessaires -->
  <script src="../dist/zip.min.js"></script> <!-- Bibliothèque pour gérer les fichiers ZIP -->
  <script src="../dist/Tome 1 - Harry Potter à l'école des sorciers.epub"></script> <!-- Fichier EPUB -->
  
  <!-- Liaison vers le fichier CSS -->
  <link rel="stylesheet" type="text/css" href="examples.css">

</head>
<body>
  <!-- Éléments pour afficher le contenu du livre -->
  <!-- <div id="title"></div> --> <!-- Titre du livre (peut-être désactivé) -->
  <select id="toc"></select> <!-- Table des matières (sélection) -->
  <div id="viewer" class="spreads"></div> <!-- Conteneur pour afficher le contenu du livre -->
  <a id="prev" href="#prev" class="arrow">‹</a> <!-- Bouton précédent -->
  <a id="next" href="#next" class="arrow">›</a> <!-- Bouton suivant -->

  <!-- Script JavaScript -->
  <script>
    // Récupération des paramètres de l'URL
    var params = URLSearchParams && new URLSearchParams(document.location.search.substring(1));
    var url = params && params.get("url") && decodeURIComponent(params.get("url")));
    var currentSectionIndex = (params && params.get("loc")) ? params.get("loc") : undefined;

    // Chargement du livre EPUB et affichage dans le conteneur "viewer"
    var book = ePub(url || "../Tome 1 - Harry Potter à l'école des sorciers.epub");
    var rendition = book.renderTo("viewer", {
      width: "100%",
      height: 600,
      spread: "always"
    });

    rendition.display(currentSectionIndex);

    // Actions lorsque le livre est prêt
    book.ready.then(() => {
      // Gestion des événements de clic sur les boutons de navigation
      var next = document.getElementById("next");
      next.addEventListener("click", function(e){
        book.package.metadata.direction === "rtl" ? rendition.prev() : rendition.next();
        e.preventDefault();
      }, false);

      var prev = document.getElementById("prev");
      prev.addEventListener("click", function(e){
        book.package.metadata.direction === "rtl" ? rendition.next() : rendition.prev();
        e.preventDefault();
      }, false);

      // Gestion des événements de pression sur les touches du clavier
      var keyListener = function(e){
        if ((e.keyCode || e.which) == 37) { // Touche gauche
          book.package.metadata.direction === "rtl" ? rendition.next() : rendition.prev();
        }
        if ((e.keyCode || e.which) == 39) { // Touche droite
          book.package.metadata.direction === "rtl" ? rendition.prev() : rendition.next();
        }
      };

      rendition.on("keyup", keyListener);
      document.addEventListener("keyup", keyListener, false);
    });

    // Autres fonctionnalités telles que la gestion de la table des matières, la visibilité des boutons de navigation, etc.

    // Gestion de la fermeture de la fenêtre
    window.addEventListener("unload", function () {
      console.log("unloading");
      this.book.destroy();
    });

    // Chargement de la table des matières
    book.loaded.navigation.then(function(toc){
      var $select = document.getElementById("toc"),
          docfrag = document.createDocumentFragment();

      toc.forEach(function(chapter) {
        var option = document.createElement("option");
        option.textContent = chapter.label;
        option.setAttribute("ref", chapter.href);

        docfrag.appendChild(option);
      });

      $select.appendChild(docfrag);

      // Action lorsqu'un élément de la table des matières est sélectionné
      $select.onchange = function(){
        var index = $select.selectedIndex,
            url = $select.options[index].getAttribute("ref");
        rendition.display(url);
        return false;
      };
    });

  </script>

</body>
</html>
